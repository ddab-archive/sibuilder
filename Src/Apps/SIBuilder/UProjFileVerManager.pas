{ ##                  
  @PROJECT_NAME             SI Tools
  @PROJECT_DESC             Simple program installation tools - project manager
                            and creator with installation and un-installation
                            programs.
  @FILE                     UProjFileVerManager.pas
  @COMMENTS                 Unit defines static class that provides methods to
                            check the version of project files, manage
                            extensions and and to convert old format files into
                            new format files
  @HISTORY(
    @REVISION(
      @VERSION              1.0
      @DATE                 03/09/2000
      @COMMENTS             Original version.
    )
    @REVISION(
      @VERSION              1.1
      @DATE                 29/12/2002
      @COMMENTS             Added new Convert2 method that converts version 2
                            style XML files to v3 format.
    )
    @REVISION(
      @VERSION              1.2
      @DATE                 19/02/2008
      @COMMENTS             Replaced usage of FileNames.inc include file with
                            UFileNames unit.
    )
  )
}


{
 * ***** BEGIN LICENSE BLOCK *****
 *
 * Version: MPL 1.1
 * 
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific language governing rights and limitations under the License.
 * 
 * The Original Code is UProjFileVerManager.pas.
 * 
 * The Initial Developer of the Original Code is Peter Johnson
 * (http://www.delphidabbler.com/).
 * 
 * Portions created by the Initial Developer are Copyright (C) 2000-2008 Peter
 * Johnson. All Rights Reserved.
 * 
 * ***** END LICENSE BLOCK *****
}


unit UProjFileVerManager;


interface


uses
  // Delphi
  Classes;


type

  {
  TProjFileVerManager:
    Static class that provides methods to check the version of project files,
    manage extensions and and to convert old format files into new format files.

    Inheritance: TProjFileVerManager -> [TObject]
  }
  TProjFileVerManager = class(TObject)
  private
    class function CheckVer1File(const FileName: string): Integer;
      {Checks to see if given file is a an old version project file. Returns 100
      if so and 0 if not}
    class function CheckXMLFile(const FileName: string): Integer;
      {Checks if the given file is an XML project file of version 200 or later.
      Returns the version number if so and 0 if not}
  public
    class function FileVersion(FileName: string): Integer;
      {Returns version number of given SI project file. Returns 100 for binary
      "version 1" files and 200 or higher for XML style project files and 0 for
      files that are not recognised}
    class function Convert(const SIBFile, SIPFile: string): Boolean;
      {Converts the old style binary file SIBFile to the new style XML file
      SIPFile. Returns true on success and false on failure}
    class function Convert2(const SIP2File, SIP3File: string;
      const Comments: TStrings): Boolean;
      {Converts the v2 style XML file (SIP2File) into new style XML file
      (SIP3File). Returns true on success and false on failure. Returns any
      comments about modifications in Comments string list (which has any help
      topic ids stored in its Objects[] property): if there are no comments the
      list is cleared}
    class function NewExtension(const OldExt: string): string;
      {Returns a file extension that represents a new (XML) style project or
      template file which corresponds to the given old style file extension}
    class function LastError: string;
      {Returns description of last error to occur in this class}
  end;


implementation


uses
  // Delphi
  SysUtils,
  // Project
  UBinaryStream, UFileNames, UTokeniser, USIBConverter, USIP2Converter;


var
  LastErrMsg: string;   // records last error message generated by the class


{ TProjFileVerManager }

class function TProjFileVerManager.CheckVer1File(
  const FileName: string): Integer;
  {Checks to see if given file is a an old version project file. Returns 100 if
  so and 0 if not}
var
  BinStream: TBinaryStream;             // binary data stream to given file
  Watermark: string;                    // watermark contained in binary file
begin
  try
    // Assume file is not a binary file
    Result := 0;
    // Open file as a binary data stream
    BinStream := TBinaryStream.Create(
      TFileStream.Create(FileName, fmOpenRead),               // the file stream
      True                            // free file stream when data stream freed
    );
    try
      // Attempt to read identifying watermark from file
      Watermark := BinStream.ReadZString;
      if Watermark = cWatermark then
        // Watermark is as expected - version is 100
        Result := 100;
    finally
      // Close binary stream along with file stream
      BinStream.Free;
    end;
  except
    // An error occurred - this is not a version 1 file
    Result := 0;
  end;
end;

class function TProjFileVerManager.CheckXMLFile(
  const FileName: string): Integer;
  {Checks if the given file is an XML project file of version 200 or later.
  Returns the version number if so and 0 if not}
var
  Tokeniser: TTokeniser;      // object that tokenises an XML file
  FileStream: TFileStream;    // stream to required file
  ParamName: string;          // stores name of parameters of root XML tag
begin
  try
    // Assume file is not an XML project file
    Result := 0;
    // Open file stream to file
    FileStream := TFileStream.Create(FileName, fmOpenRead);
    try
      // Create an XML tokeniser object to read file
      Tokeniser := TTokeniser.Create(FileStream);
      try
        // Check that first tag is the project file opening tag
        if (Tokeniser.Token <> tkOpenTag)
          and (Tokeniser.Tag <> cPrjRootTag) then
          Exit;
        repeat
          // Scan thru opening tag's parameters looking for version parameter
          ParamName := '';
          Tokeniser.NextToken;
          if Tokeniser.Token = tkParam then
          begin
            ParamName := Tokeniser.ParamName;
            if ParamName = 'version' then
              // Found version parameter - return value as integer
              Result := StrToIntDef(Tokeniser.ParamValue, 0);
          end;
        until (Tokeniser.NextToken <> tkParam) or (ParamName = 'version');
      finally
        // Tidy up
        Tokeniser.Free;
      end;
    finally
      FileStream.Free;
    end;
  except
    // There was an exception - not a valid file
    Result := 0;
  end;
end;

class function TProjFileVerManager.Convert(
  const SIBFile, SIPFile: string): Boolean;
  {Converts the old style binary file SIBFile to the new style XML file SIPFile.
  Returns true on success and false on failure}
begin
  // Assume success
  Result := True;
  try
    // Convert the file using the converter object
    with TSIBConverter.Create do
      try
        Convert(SIBFile, SIPFile);
      finally
        Free;
      end;
  except
    on E: Exception do
    begin
      // We have exception - return false and record message
      Result := False;
      LastErrMsg := E.Message;
    end;
  end;
end;

class function TProjFileVerManager.Convert2(const SIP2File,
  SIP3File: string; const Comments: TStrings): Boolean;
  {Converts the v2 style XML file (SIP2File) into new style XML file (SIP3File).
  Returns true on success and false on failure. Returns any comments about
  modifications in Comments string list (which has any help topic ids stored in
  its Objects[] property): if there are no comments the list is cleared}
begin
  Assert(Assigned(Comments));
  // Freeze updating of comments object
  Comments.BeginUpdate;
  try
    // Clear the comments
    Comments.Clear;
    try
      // Convert the file using the converter object
      with TSIP2Converter.Create(SIP2File, SIP3File, Comments) do
        try
          Result := Convert;
        finally
          Free;
        end;
    except
      on E: Exception do
      begin
        // We have exception - return false and record message
        Result := False;
        LastErrMsg := E.Message;
        // message overwrites any other comments
        Comments.Text := LastErrMsg;
      end;
    end;
  finally
    // Update the comments
    Comments.EndUpdate;
  end;
end;

class function TProjFileVerManager.FileVersion(FileName: string): Integer;
  {Returns version number of given SI project file. Returns 100 for binary
  "version 1" files and 200 or higher for XML style project files and 0 for
  files that are not recognised}
begin
  // First check if file is new style - result is 0 if not
  Result := CheckXMLFile(FileName);
  if Result = 0 then
    // Wasn't an XML file - check for old style - result again 0 if not
    Result := CheckVer1File(FileName);
end;

class function TProjFileVerManager.LastError: string;
  {Returns description of last error to occur in this class}
begin
  Result := LastErrMsg;
end;

class function TProjFileVerManager.NewExtension(const OldExt: string): string;
  {Returns a file extension that represents a new (XML) style project or
  template file which corresponds to the given old style file extension}
begin
  if (CompareText(OldExt, cOldDefProjExt) = 0)
    or (CompareText(OldExt, cDefProjExt) = 0) then
    Result := cDefProjExt
  else
    Result := cProjExt
end;

end.
